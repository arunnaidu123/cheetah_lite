/*
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 The SKA organisation
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include "cheetah/generators/pulse_profile/ProfileManager.h"
#include "cheetah/generators/pulse_profile/src/ProfileManagerInitialiser.h"
#include "cheetah/generators/pulse_profile/PulsarProfileConfig.h"
#include <panda/Error.h>


namespace ska {
namespace cheetah {
namespace generators {


ProfileManager::ProfileManager()
{
    // pulls in boilerplate generated by the ADD_PROFILE cmake macros
    pulse_profile::ProfileManagerInitialiser(*this);
}

ProfileManager::~ProfileManager()
{
}

void ProfileManager::add(PulsarProfileId id, PulsarProfile profile)
{
    _profiles.insert(std::make_pair(id, profile));
}

PulsarProfile ProfileManager::profile(PulsarProfileId const& id) const
{
    {
        // find in exisiting profile data set in memory
        auto it=_profiles.find(id);
        if(it != _profiles.end()) {
           return it->second; 
        }
    }
    // find in registered profile catalogues
    auto it=std::find(_pulsar_id.cbegin(), _pulsar_id.cend(), id);
    if (it==_pulsar_id.cend())
        throw panda::Error("unknown pulse profile requested");

    // TODO fetch details of pulsar from the server
    throw panda::Error("Not yet implemented");

}

PulsarProfile ProfileManager::profile(PulsarProfileConfig const& config) {
    return profile(config.profile_id());
}

/*
std::list<PulsarProfileId> const& ProfileManager::profile_list() const
{
    if(!_pulsar_id.size()) {
        // TODO refresh known profile list
    }
    return _pulsar_id;
}
*/

} // namespace generators
} // namespace cheetah
} // namespace ska
